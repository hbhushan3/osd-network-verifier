// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cloudclient/gcp/gcp.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	compute "google.golang.org/api/compute/v1"
)

// MockMachineTypeClient is a mock of MachineTypeClient interface.
type MockMachineTypeClient struct {
	ctrl     *gomock.Controller
	recorder *MockMachineTypeClientMockRecorder
}

// MockMachineTypeClientMockRecorder is the mock recorder for MockMachineTypeClient.
type MockMachineTypeClientMockRecorder struct {
	mock *MockMachineTypeClient
}

// NewMockMachineTypeClient creates a new mock instance.
func NewMockMachineTypeClient(ctrl *gomock.Controller) *MockMachineTypeClient {
	mock := &MockMachineTypeClient{ctrl: ctrl}
	mock.recorder = &MockMachineTypeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineTypeClient) EXPECT() *MockMachineTypeClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockMachineTypeClient) List(projectID, zone string) *compute.MachineTypesListCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", projectID, zone)
	ret0, _ := ret[0].(*compute.MachineTypesListCall)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockMachineTypeClientMockRecorder) List(projectID, zone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMachineTypeClient)(nil).List), projectID, zone)
}

// MockInstancesClient is a mock of InstancesClient interface.
type MockInstancesClient struct {
	ctrl     *gomock.Controller
	recorder *MockInstancesClientMockRecorder
}

// MockInstancesClientMockRecorder is the mock recorder for MockInstancesClient.
type MockInstancesClientMockRecorder struct {
	mock *MockInstancesClient
}

// NewMockInstancesClient creates a new mock instance.
func NewMockInstancesClient(ctrl *gomock.Controller) *MockInstancesClient {
	mock := &MockInstancesClient{ctrl: ctrl}
	mock.recorder = &MockInstancesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstancesClient) EXPECT() *MockInstancesClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockInstancesClient) Get(projectID, zone, instanceName string) *compute.InstancesGetCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", projectID, zone, instanceName)
	ret0, _ := ret[0].(*compute.InstancesGetCall)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockInstancesClientMockRecorder) Get(projectID, zone, instanceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInstancesClient)(nil).Get), projectID, zone, instanceName)
}

// GetSerialPortOutput mocks base method.
func (m *MockInstancesClient) GetSerialPortOutput(projectID, zone, instanceName string) *compute.InstancesGetSerialPortOutputCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSerialPortOutput", projectID, zone, instanceName)
	ret0, _ := ret[0].(*compute.InstancesGetSerialPortOutputCall)
	return ret0
}

// GetSerialPortOutput indicates an expected call of GetSerialPortOutput.
func (mr *MockInstancesClientMockRecorder) GetSerialPortOutput(projectID, zone, instanceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSerialPortOutput", reflect.TypeOf((*MockInstancesClient)(nil).GetSerialPortOutput), projectID, zone, instanceName)
}

// Insert mocks base method.
func (m *MockInstancesClient) Insert(project, zone string, instance *compute.Instance) *compute.InstancesInsertCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", project, zone, instance)
	ret0, _ := ret[0].(*compute.InstancesInsertCall)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockInstancesClientMockRecorder) Insert(project, zone, instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockInstancesClient)(nil).Insert), project, zone, instance)
}

// SetLabels mocks base method.
func (m *MockInstancesClient) SetLabels(projectID, zone, instanceName string, reqbody *compute.InstancesSetLabelsRequest) *compute.InstancesSetLabelsCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLabels", projectID, zone, instanceName, reqbody)
	ret0, _ := ret[0].(*compute.InstancesSetLabelsCall)
	return ret0
}

// SetLabels indicates an expected call of SetLabels.
func (mr *MockInstancesClientMockRecorder) SetLabels(projectID, zone, instanceName, reqbody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLabels", reflect.TypeOf((*MockInstancesClient)(nil).SetLabels), projectID, zone, instanceName, reqbody)
}

// Stop mocks base method.
func (m *MockInstancesClient) Stop(projectID, zone, instanceName string) *compute.InstancesStopCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", projectID, zone, instanceName)
	ret0, _ := ret[0].(*compute.InstancesStopCall)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockInstancesClientMockRecorder) Stop(projectID, zone, instanceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockInstancesClient)(nil).Stop), projectID, zone, instanceName)
}
